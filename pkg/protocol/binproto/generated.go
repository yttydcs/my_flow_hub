// Code generated by binproto-gen. DO NOT EDIT.
package binproto

import (
	"errors"
	"fmt"
)

// TypeID constants
const (
	_ uint16 = iota + 1000 // Start custom message types from 1001
	TypeOKResp
	TypeErrResp
	TypeManagerAuthReq
	TypeManagerAuthResp
	TypeUserLoginReq
	TypeUserLoginResp
	TypeUserMeReq
	TypeUserMeResp
	TypeUserLogoutReq
	TypeUserItem
	TypeUserListReq
	TypeUserListResp
	TypeUserCreateReq
	TypeUserCreateResp
	TypeUserUpdateReq
	TypeUserDeleteReq
	TypeDeviceItem
	TypeQueryNodesReq
	TypeQueryNodesResp
	TypeCreateDeviceReq
	TypeUpdateDeviceReq
	TypeDeleteDeviceReq
)

// DecoderFunc defines the function signature for a message decoder.
type DecoderFunc func(payload []byte) (interface{}, error)

// decoders is a map of TypeID to its decoder function.
var decoders = make(map[uint16]DecoderFunc)

func init() {
	decoders[TypeOKResp] = func(payload []byte) (interface{}, error) {
		var msg OKResp
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeErrResp] = func(payload []byte) (interface{}, error) {
		var msg ErrResp
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeManagerAuthReq] = func(payload []byte) (interface{}, error) {
		var msg ManagerAuthReq
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeManagerAuthResp] = func(payload []byte) (interface{}, error) {
		var msg ManagerAuthResp
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeUserLoginReq] = func(payload []byte) (interface{}, error) {
		var msg UserLoginReq
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeUserLoginResp] = func(payload []byte) (interface{}, error) {
		var msg UserLoginResp
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeUserMeReq] = func(payload []byte) (interface{}, error) {
		var msg UserMeReq
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeUserMeResp] = func(payload []byte) (interface{}, error) {
		var msg UserMeResp
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeUserLogoutReq] = func(payload []byte) (interface{}, error) {
		var msg UserLogoutReq
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeUserItem] = func(payload []byte) (interface{}, error) {
		var msg UserItem
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeUserListReq] = func(payload []byte) (interface{}, error) {
		var msg UserListReq
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeUserListResp] = func(payload []byte) (interface{}, error) {
		var msg UserListResp
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeUserCreateReq] = func(payload []byte) (interface{}, error) {
		var msg UserCreateReq
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeUserCreateResp] = func(payload []byte) (interface{}, error) {
		var msg UserCreateResp
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeUserUpdateReq] = func(payload []byte) (interface{}, error) {
		var msg UserUpdateReq
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeUserDeleteReq] = func(payload []byte) (interface{}, error) {
		var msg UserDeleteReq
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeDeviceItem] = func(payload []byte) (interface{}, error) {
		var msg DeviceItem
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeQueryNodesReq] = func(payload []byte) (interface{}, error) {
		var msg QueryNodesReq
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeQueryNodesResp] = func(payload []byte) (interface{}, error) {
		var msg QueryNodesResp
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeCreateDeviceReq] = func(payload []byte) (interface{}, error) {
		var msg CreateDeviceReq
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeUpdateDeviceReq] = func(payload []byte) (interface{}, error) {
		var msg UpdateDeviceReq
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
	decoders[TypeDeleteDeviceReq] = func(payload []byte) (interface{}, error) {
		var msg DeleteDeviceReq
		err := msg.DecodeFrom(payload)
		return &msg, err
	}
}

// Decode decodes a payload by its typeID.
func Decode(typeID uint16, payload []byte) (interface{}, error) {
	decoder, ok := decoders[typeID]
	if !ok {
		return nil, fmt.Errorf("no decoder for typeID %d", typeID)
	}
	return decoder(payload)
}

// EncodeTo serializes OKResp to a byte buffer.
func (m *OKResp) EncodeTo(dst []byte) ([]byte, error) {
	// TODO: Implement me
	return nil, errors.New("not implemented")
}

// DecodeFrom deserializes OKResp from a byte buffer.
func (m *OKResp) DecodeFrom(src []byte) error {
	// TODO: Implement me
	return errors.New("not implemented")
}

// EncodeTo serializes ErrResp to a byte buffer.
func (m *ErrResp) EncodeTo(dst []byte) ([]byte, error) {
	// TODO: Implement me
	return nil, errors.New("not implemented")
}

// DecodeFrom deserializes ErrResp from a byte buffer.
func (m *ErrResp) DecodeFrom(src []byte) error {
	// TODO: Implement me
	return errors.New("not implemented")
}

// EncodeTo serializes ManagerAuthReq to a byte buffer.
func (m *ManagerAuthReq) EncodeTo(dst []byte) ([]byte, error) {
	w := NewWriter(len(m.Token) + 2)
	w.WriteLen16(len(m.Token))
	w.WriteBytes([]byte(m.Token))
	return w.Bytes(), nil
}

// DecodeFrom deserializes ManagerAuthReq from a byte buffer.
func (m *ManagerAuthReq) DecodeFrom(src []byte) error {
	r := NewReader(src)
	ln, err := r.ReadLen16()
	if err != nil {
		return err
	}
	b, err := r.Read(ln)
	if err != nil {
		return err
	}
	m.Token = string(b)
	return nil
}

// EncodeTo serializes ManagerAuthResp to a byte buffer.
func (m *ManagerAuthResp) EncodeTo(dst []byte) ([]byte, error) {
	w := NewWriter(64)
	var bm uint8
	if m.Role != "" {
		bm |= 1 << 0
	}
	w.WriteBytes([]byte{bm})
	w.WriteU64(m.RequestID)
	w.WriteU64(m.DeviceUID)
	if m.Role != "" {
		w.WriteLen16(len(m.Role))
		w.WriteBytes([]byte(m.Role))
	}
	return w.Bytes(), nil
}

// DecodeFrom deserializes ManagerAuthResp from a byte buffer.
func (m *ManagerAuthResp) DecodeFrom(src []byte) error {
	r := NewReader(src)
	bm, err := r.Read(1)
	if err != nil {
		return err
	}
	if m.RequestID, err = r.ReadU64(); err != nil {
		return err
	}
	if m.DeviceUID, err = r.ReadU64(); err != nil {
		return err
	}
	if bm[0]&(1<<0) != 0 {
		ln, err := r.ReadLen16()
		if err != nil {
			return err
		}
		b, err := r.Read(ln)
		if err != nil {
			return err
		}
		m.Role = string(b)
	}
	return nil
}

// EncodeTo serializes UserLoginReq to a byte buffer.
func (m *UserLoginReq) EncodeTo(dst []byte) ([]byte, error) {
	w := NewWriter(len(m.Username) + len(m.Password) + 4)
	w.WriteLen16(len(m.Username))
	w.WriteBytes([]byte(m.Username))
	w.WriteLen16(len(m.Password))
	w.WriteBytes([]byte(m.Password))
	return w.Bytes(), nil
}

// DecodeFrom deserializes UserLoginReq from a byte buffer.
func (m *UserLoginReq) DecodeFrom(src []byte) error {
	r := NewReader(src)
	ln, err := r.ReadLen16()
	if err != nil {
		return err
	}
	b, err := r.Read(ln)
	if err != nil {
		return err
	}
	m.Username = string(b)
	ln, err = r.ReadLen16()
	if err != nil {
		return err
	}
	b, err = r.Read(ln)
	if err != nil {
		return err
	}
	m.Password = string(b)
	return nil
}

// EncodeTo serializes UserLoginResp to a byte buffer.
func (m *UserLoginResp) EncodeTo(dst []byte) ([]byte, error) {
	w := NewWriter(256)
	w.WriteU64(m.RequestID)
	w.WriteU64(m.KeyID)
	w.WriteU64(m.UserID)
	w.WriteLen16(len(m.Secret))
	w.WriteBytes([]byte(m.Secret))
	w.WriteLen16(len(m.Username))
	w.WriteBytes([]byte(m.Username))
	w.WriteLen16(len(m.DisplayName))
	w.WriteBytes([]byte(m.DisplayName))
	w.WriteVarint(uint64(len(m.Permissions)))
	for _, p := range m.Permissions {
		w.WriteLen16(len(p))
		w.WriteBytes([]byte(p))
	}
	return w.Bytes(), nil
}

// DecodeFrom deserializes UserLoginResp from a byte buffer.
func (m *UserLoginResp) DecodeFrom(src []byte) error {
	r := NewReader(src)
	var err error
	if m.RequestID, err = r.ReadU64(); err != nil {
		return err
	}
	if m.KeyID, err = r.ReadU64(); err != nil {
		return err
	}
	if m.UserID, err = r.ReadU64(); err != nil {
		return err
	}
	// Secret
	ln, err := r.ReadLen16()
	if err != nil { return err }
	b, err := r.Read(ln)
	if err != nil { return err }
	m.Secret = string(b)
	// Username
	ln, err = r.ReadLen16()
	if err != nil { return err }
	b, err = r.Read(ln)
	if err != nil { return err }
	m.Username = string(b)
	// DisplayName
	ln, err = r.ReadLen16()
	if err != nil { return err }
	b, err = r.Read(ln)
	if err != nil { return err }
	m.DisplayName = string(b)
	// Permissions
	count, err := r.ReadVarint()
	if err != nil { return err }
	m.Permissions = make([]string, count)
	for i := 0; i < int(count); i++ {
		ln, err := r.ReadLen16()
		if err != nil { return err }
		b, err := r.Read(ln)
		if err != nil { return err }
		m.Permissions[i] = string(b)
	}
	return nil
}

// EncodeTo serializes UserMeReq to a byte buffer.
func (m *UserMeReq) EncodeTo(dst []byte) ([]byte, error) {
	w := NewWriter(len(m.UserKey) + 2)
	w.WriteLen16(len(m.UserKey))
	w.WriteBytes([]byte(m.UserKey))
	return w.Bytes(), nil
}

// DecodeFrom deserializes UserMeReq from a byte buffer.
func (m *UserMeReq) DecodeFrom(src []byte) error {
	r := NewReader(src)
	ln, err := r.ReadLen16()
	if err != nil {
		return err
	}
	b, err := r.Read(ln)
	if err != nil {
		return err
	}
	m.UserKey = string(b)
	return nil
}

// EncodeTo serializes UserMeResp to a byte buffer.
func (m *UserMeResp) EncodeTo(dst []byte) ([]byte, error) {
	w := NewWriter(256)
	w.WriteU64(m.RequestID)
	w.WriteU64(m.UserID)
	w.WriteLen16(len(m.Username))
	w.WriteBytes([]byte(m.Username))
	w.WriteLen16(len(m.DisplayName))
	w.WriteBytes([]byte(m.DisplayName))
	w.WriteVarint(uint64(len(m.Permissions)))
	for _, p := range m.Permissions {
		w.WriteLen16(len(p))
		w.WriteBytes([]byte(p))
	}
	return w.Bytes(), nil
}

// DecodeFrom deserializes UserMeResp from a byte buffer.
func (m *UserMeResp) DecodeFrom(src []byte) error {
	r := NewReader(src)
	var err error
	if m.RequestID, err = r.ReadU64(); err != nil {
		return err
	}
	if m.UserID, err = r.ReadU64(); err != nil {
		return err
	}
	// Username
	ln, err := r.ReadLen16()
	if err != nil { return err }
	b, err := r.Read(ln)
	if err != nil { return err }
	m.Username = string(b)
	// DisplayName
	ln, err = r.ReadLen16()
	if err != nil { return err }
	b, err = r.Read(ln)
	if err != nil { return err }
	m.DisplayName = string(b)
	// Permissions
	count, err := r.ReadVarint()
	if err != nil { return err }
	m.Permissions = make([]string, count)
	for i := 0; i < int(count); i++ {
		ln, err := r.ReadLen16()
		if err != nil { return err }
		b, err := r.Read(ln)
		if err != nil { return err }
		m.Permissions[i] = string(b)
	}
	return nil
}

// EncodeTo serializes UserLogoutReq to a byte buffer.
func (m *UserLogoutReq) EncodeTo(dst []byte) ([]byte, error) {
	// TODO: Implement me
	return nil, errors.New("not implemented")
}

// DecodeFrom deserializes UserLogoutReq from a byte buffer.
func (m *UserLogoutReq) DecodeFrom(src []byte) error {
	// TODO: Implement me
	return errors.New("not implemented")
}

// EncodeTo serializes UserItem to a byte buffer.
func (m *UserItem) EncodeTo(dst []byte) ([]byte, error) {
	// TODO: Implement me
	return nil, errors.New("not implemented")
}

// DecodeFrom deserializes UserItem from a byte buffer.
func (m *UserItem) DecodeFrom(src []byte) error {
	// TODO: Implement me
	return errors.New("not implemented")
}

// EncodeTo serializes UserListReq to a byte buffer.
func (m *UserListReq) EncodeTo(dst []byte) ([]byte, error) {
	// TODO: Implement me
	return nil, errors.New("not implemented")
}

// DecodeFrom deserializes UserListReq from a byte buffer.
func (m *UserListReq) DecodeFrom(src []byte) error {
	// TODO: Implement me
	return errors.New("not implemented")
}

// EncodeTo serializes UserListResp to a byte buffer.
func (m *UserListResp) EncodeTo(dst []byte) ([]byte, error) {
	// TODO: Implement me
	return nil, errors.New("not implemented")
}

// DecodeFrom deserializes UserListResp from a byte buffer.
func (m *UserListResp) DecodeFrom(src []byte) error {
	// TODO: Implement me
	return errors.New("not implemented")
}

// EncodeTo serializes UserCreateReq to a byte buffer.
func (m *UserCreateReq) EncodeTo(dst []byte) ([]byte, error) {
	// TODO: Implement me
	return nil, errors.New("not implemented")
}

// DecodeFrom deserializes UserCreateReq from a byte buffer.
func (m *UserCreateReq) DecodeFrom(src []byte) error {
	// TODO: Implement me
	return errors.New("not implemented")
}

// EncodeTo serializes UserCreateResp to a byte buffer.
func (m *UserCreateResp) EncodeTo(dst []byte) ([]byte, error) {
	// TODO: Implement me
	return nil, errors.New("not implemented")
}

// DecodeFrom deserializes UserCreateResp from a byte buffer.
func (m *UserCreateResp) DecodeFrom(src []byte) error {
	// TODO: Implement me
	return errors.New("not implemented")
}

// EncodeTo serializes UserUpdateReq to a byte buffer.
func (m *UserUpdateReq) EncodeTo(dst []byte) ([]byte, error) {
	// TODO: Implement me
	return nil, errors.New("not implemented")
}

// DecodeFrom deserializes UserUpdateReq from a byte buffer.
func (m *UserUpdateReq) DecodeFrom(src []byte) error {
	// TODO: Implement me
	return errors.New("not implemented")
}

// EncodeTo serializes UserDeleteReq to a byte buffer.
func (m *UserDeleteReq) EncodeTo(dst []byte) ([]byte, error) {
	// TODO: Implement me
	return nil, errors.New("not implemented")
}

// DecodeFrom deserializes UserDeleteReq from a byte buffer.
func (m *UserDeleteReq) DecodeFrom(src []byte) error {
	// TODO: Implement me
	return errors.New("not implemented")
}

// EncodeTo serializes DeviceItem to a byte buffer.
func (m *DeviceItem) EncodeTo(dst []byte) ([]byte, error) {
	// TODO: Implement me
	return nil, errors.New("not implemented")
}

// DecodeFrom deserializes DeviceItem from a byte buffer.
func (m *DeviceItem) DecodeFrom(src []byte) error {
	// TODO: Implement me
	return errors.New("not implemented")
}

// EncodeTo serializes QueryNodesReq to a byte buffer.
func (m *QueryNodesReq) EncodeTo(dst []byte) ([]byte, error) {
	// TODO: Implement me
	return nil, errors.New("not implemented")
}

// DecodeFrom deserializes QueryNodesReq from a byte buffer.
func (m *QueryNodesReq) DecodeFrom(src []byte) error {
	// TODO: Implement me
	return errors.New("not implemented")
}

// EncodeTo serializes QueryNodesResp to a byte buffer.
func (m *QueryNodesResp) EncodeTo(dst []byte) ([]byte, error) {
	// TODO: Implement me
	return nil, errors.New("not implemented")
}

// DecodeFrom deserializes QueryNodesResp from a byte buffer.
func (m *QueryNodesResp) DecodeFrom(src []byte) error {
	// TODO: Implement me
	return errors.New("not implemented")
}

// EncodeTo serializes CreateDeviceReq to a byte buffer.
func (m *CreateDeviceReq) EncodeTo(dst []byte) ([]byte, error) {
	// TODO: Implement me
	return nil, errors.New("not implemented")
}

// DecodeFrom deserializes CreateDeviceReq from a byte buffer.
func (m *CreateDeviceReq) DecodeFrom(src []byte) error {
	// TODO: Implement me
	return errors.New("not implemented")
}

// EncodeTo serializes UpdateDeviceReq to a byte buffer.
func (m *UpdateDeviceReq) EncodeTo(dst []byte) ([]byte, error) {
	// TODO: Implement me
	return nil, errors.New("not implemented")
}

// DecodeFrom deserializes UpdateDeviceReq from a byte buffer.
func (m *UpdateDeviceReq) DecodeFrom(src []byte) error {
	// TODO: Implement me
	return errors.New("not implemented")
}

// EncodeTo serializes DeleteDeviceReq to a byte buffer.
func (m *DeleteDeviceReq) EncodeTo(dst []byte) ([]byte, error) {
	// TODO: Implement me
	return nil, errors.New("not implemented")
}

// DecodeFrom deserializes DeleteDeviceReq from a byte buffer.
func (m *DeleteDeviceReq) DecodeFrom(src []byte) error {
	// TODO: Implement me
	return errors.New("not implemented")
}

